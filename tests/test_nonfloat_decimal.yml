- case: test_sum
  main: |
    from decimal import Decimal

    s = sum([Decimal(1), Decimal(2), Decimal(3)])
    Decimal(s)
  out: ""

- case: test_nonfloat_decimal_err
  main: |
    from decimal import Decimal
    from math import inf
    from typing_extensions import Literal

    Decimal("1.02")
    Decimal(Decimal("1.02"))
    Decimal(1)
    Decimal()
    Decimal((1, (3, 1, 4), -2))
    Decimal(1.02)
    Decimal(Literal["1.02"])

  out: |
    main:10: error: Invalid type passed to Decimal (expected "Union[int, str, Decimal]"), got builtins.float instead (offender: float)  [valid-decimal-arg]
    main:11: error: Invalid type passed to Decimal (expected "Union[int, str, Decimal]"), got builtins.object instead (offender: object)  [valid-decimal-arg]
    main:11: error: Argument 1 to "Decimal" has incompatible type "object"; expected "Decimal | float | str | tuple[int, Sequence[int], int]"  [arg-type]

- case: test_any_union_ok
  main: |
    from decimal import Decimal
    from typing import Any, Union

    b = 1  # type: Union[int, Any]
    Decimal(b)
  out: ""

- case: test_float_union_err
  main: |
    from decimal import Decimal
    from typing import Any, Union, Sequence, Tuple

    c = 1  # type: Union[Decimal, float, str, int]
    Decimal(c)
  out: |
    main:5: error: Invalid type passed to Decimal (expected "Union[int, str, Decimal]"), got Union[decimal.Decimal, builtins.float, builtins.str, builtins.int] instead (offender: float)  [valid-decimal-arg]

- case: test_complex_nested_tuple_union_err
  main: |
    from decimal import Decimal
    from typing import Any, Union, Sequence, Tuple

    d = 1  # type: Union[Decimal, float, str, Tuple[int, Sequence[int], int]]
    Decimal(d)
  out: |
    main:5: error: Invalid type passed to Decimal (expected "Union[int, str, Decimal]"), got Union[decimal.Decimal, builtins.float, builtins.str, tuple[builtins.int, typing.Sequence[builtins.int], builtins.int]] instead (offender: float)  [valid-decimal-arg]
